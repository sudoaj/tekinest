{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport { ApplicationRef, Injectable, NgZone, NgModule } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, filter, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This is the public interface of \\@angular-redux/store. It wraps the global\n * redux store and adds a few other add on methods. It's what you'll inject\n * into your Angular application as a service.\n * @abstract\n * @template RootState\n */\nclass NgRedux {}\n/**\n * \\@hidden, \\@deprecated\n */\nNgRedux.instance = undefined;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst environment = /** @type {?} */typeof window !== 'undefined' ? window : {};\n/**\n * An angular-2-ified version of the Redux DevTools chrome extension.\n */\nclass DevToolsExtension {\n  /**\n   * @hidden\n   * @param {?} appRef\n   * @param {?} ngRedux\n   */\n  constructor(appRef, ngRedux) {\n    this.appRef = appRef;\n    this.ngRedux = ngRedux;\n    /**\n     * A wrapper for the Chrome Extension Redux DevTools.\n     * Makes sure state changes triggered by the extension\n     * trigger Angular2's change detector.\n     *\n     * @argument options: dev tool options; same\n     * format as described here:\n     * [zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md]\n     */\n    this.enhancer = options => {\n      /** @type {?} */\n      let subscription;\n      if (!this.isEnabled()) {\n        return null;\n      }\n      // Make sure changes from dev tools update angular's view.\n      /** @type {?} */this.getDevTools().listen(({\n        type\n      }) => {\n        if (type === 'START') {\n          subscription = this.ngRedux.subscribe(() => {\n            if (!NgZone.isInAngularZone()) {\n              this.appRef.tick();\n            }\n          });\n        } else if (type === 'STOP') {\n          subscription();\n        }\n      });\n      return (/** @type {?} */this.getDevTools()(options || {})\n      );\n    };\n    /**\n     * Returns true if the extension is installed and enabled.\n     */\n    this.isEnabled = () => !!this.getDevTools();\n    /**\n     * Returns the redux devtools enhancer.\n     */\n    this.getDevTools = () => environment && (environment.__REDUX_DEVTOOLS_EXTENSION__ || environment.devToolsExtension);\n  }\n}\nDevToolsExtension.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\nDevToolsExtension.ctorParameters = () => [{\n  type: ApplicationRef\n}, {\n  type: NgRedux\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices.\n *\n * @hidden\n * @param {?} v\n * @param {?} pathElems\n * @return {?}\n */\nfunction getIn(v, pathElems) {\n  if (!v) {\n    return v;\n  }\n  // If this is an ImmutableJS structure, use existing getIn function\n  if ('function' === typeof v.getIn) {\n    return v.getIn(pathElems);\n  }\n  const [firstElem, ...restElems] = pathElems;\n  if (undefined === v[firstElem]) {\n    return undefined;\n  }\n  if (restElems.length === 0) {\n    return v[firstElem];\n  }\n  return getIn(v[firstElem], restElems);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices. Path elements are created if\n * not there already. Does not mutate the given object.\n *\n * @hidden\n * @type {?}\n */\nconst setIn = (obj, [firstElem, ...restElems], value) => 'function' === typeof (obj[firstElem] || {}).setIn ? Object.assign({}, obj, {\n  [firstElem]: obj[firstElem].setIn(restElems, value)\n}) : Object.assign({}, obj, {\n  [firstElem]: restElems.length === 0 ? value : setIn(obj[firstElem] || {}, restElems, value)\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet reducerMap = {};\n/** @type {?} */\nconst composeReducers = (...reducers) => (state, action) => reducers.reduce((subState, reducer) => reducer(subState, action), state);\n/**\n * @param {?} rootReducer Call this on your root reducer to enable SubStore\n * functionality for pre-configured stores (e.g. using NgRedux.provideStore()).\n * NgRedux.configureStore\n * does it for you under the hood.\n * @return {?}\n */\nfunction enableFractalReducers(rootReducer) {\n  reducerMap = {};\n  return composeReducers(rootFractalReducer, rootReducer);\n}\n/**\n * @hidden\n * @param {?} basePath\n * @param {?} localReducer\n * @return {?}\n */\nfunction registerFractalReducer(basePath, localReducer) {\n  /** @type {?} */\n  const existingFractalReducer = reducerMap[JSON.stringify(basePath)];\n  if (existingFractalReducer && existingFractalReducer !== localReducer) {\n    throw new Error(`attempt to overwrite fractal reducer for basePath ${basePath}`);\n  }\n  reducerMap[JSON.stringify(basePath)] = localReducer;\n}\n/**\n * @hidden\n * @param {?} basePath\n * @param {?} nextLocalReducer\n * @return {?}\n */\nfunction replaceLocalReducer(basePath, nextLocalReducer) {\n  reducerMap[JSON.stringify(basePath)] = nextLocalReducer;\n}\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nfunction rootFractalReducer(state = {}, action) {\n  /** @type {?} */\n  const fractalKey = action['@angular-redux::fractalkey'];\n  /** @type {?} */\n  const fractalPath = fractalKey ? JSON.parse(fractalKey) : [];\n  /** @type {?} */\n  const localReducer = reducerMap[fractalKey || ''];\n  return fractalKey && localReducer ? setIn(state, fractalPath, localReducer(getIn(state, fractalPath), action)) : state;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * OPTIONS_KEY: this is per-class (static) and holds the config from the\n * \\@SubStore decorator.\n * @type {?}\n */\nconst OPTIONS_KEY = '@angular-redux::substore::class::options';\n/**\n * INSTANCE_SUBSTORE_KEY, INSTANCE_SELECTIONS_KEY: these are per-instance\n * (non-static) and holds references to the substores/selected observables\n * to be used by an instance of a decorated class. I'm not using\n * reflect-metadata here because I want\n *\n * 1. different instances to have different substores in the case where\n * `basePathMethodName` is dynamic.\n * 2. the instance substore to be garbage collected when the instance is no\n * longer reachable.\n * This is therefore an own-property on the actual instance of the decorated\n * class.\n * @type {?}\n */\nconst INSTANCE_SUBSTORE_KEY = '@angular-redux::substore::instance::store';\n/** @type {?} */\nconst INSTANCE_SELECTIONS_KEY = '@angular-redux::substore::instance::selections';\n/**\n * Used to detect when the base path changes - this allows components to\n * dynamically adjust their selections if necessary.\n * @type {?}\n */\nconst INSTANCE_BASE_PATH_KEY = '@angular-redux::substore::instance::basepath';\n/** @type {?} */\nconst getClassOptions = decoratedInstance => decoratedInstance.constructor[OPTIONS_KEY];\n/**\n * @hidden\n * @type {?}\n */\nconst setClassOptions = (decoratedClassConstructor, options) => {\n  decoratedClassConstructor[OPTIONS_KEY] = options;\n};\n// I want the store to be saved on the actual instance so\n// 1. different instances can have distinct substores if necessary\n// 2. the substore/selections will be marked for garbage collection when the\n//    instance is destroyed.\n/** @type {?} */\nconst setInstanceStore = (decoratedInstance, store) => decoratedInstance[INSTANCE_SUBSTORE_KEY] = store;\n/** @type {?} */\nconst getInstanceStore = decoratedInstance => decoratedInstance[INSTANCE_SUBSTORE_KEY];\n/** @type {?} */\nconst getInstanceSelectionMap = decoratedInstance => {\n  /** @type {?} */\n  const map$$1 = decoratedInstance[INSTANCE_SELECTIONS_KEY] || {};\n  decoratedInstance[INSTANCE_SELECTIONS_KEY] = map$$1;\n  return map$$1;\n};\n/** @type {?} */\nconst hasBasePathChanged = (decoratedInstance, basePath) => decoratedInstance[INSTANCE_BASE_PATH_KEY] !== (basePath || []).toString();\n/** @type {?} */\nconst setInstanceBasePath = (decoratedInstance, basePath) => {\n  decoratedInstance[INSTANCE_BASE_PATH_KEY] = (basePath || []).toString();\n};\n/** @type {?} */\nconst clearInstanceState = decoratedInstance => {\n  decoratedInstance[INSTANCE_SELECTIONS_KEY] = null;\n  decoratedInstance[INSTANCE_SUBSTORE_KEY] = null;\n  decoratedInstance[INSTANCE_BASE_PATH_KEY] = null;\n};\n/**\n * Gets the store associated with a decorated instance (e.g. a\n * component or service)\n * @hidden\n * @type {?}\n */\nconst getBaseStore = decoratedInstance => {\n  // The root store hasn't been set up yet.\n  if (!NgRedux.instance) {\n    return undefined;\n  }\n  /** @type {?} */\n  const options = getClassOptions(decoratedInstance);\n  // This is not decorated with `@WithSubStore`. Return the root store.\n  if (!options) {\n    return NgRedux.instance;\n  }\n  // Dynamic base path support:\n  /** @type {?} */\n  const basePath = decoratedInstance[options.basePathMethodName]();\n  if (hasBasePathChanged(decoratedInstance, basePath)) {\n    clearInstanceState(decoratedInstance);\n    setInstanceBasePath(decoratedInstance, basePath);\n  }\n  if (!basePath) {\n    return NgRedux.instance;\n  }\n  /** @type {?} */\n  const store = getInstanceStore(decoratedInstance);\n  if (!store) {\n    setInstanceStore(decoratedInstance, NgRedux.instance.configureSubStore(basePath, options.localReducer));\n  }\n  return getInstanceStore(decoratedInstance);\n};\n/**\n * Creates an Observable from the given selection parameters,\n * rooted at decoratedInstance's store, and caches it on the\n * instance for future use.\n * @hidden\n * @type {?}\n */\nconst getInstanceSelection = (decoratedInstance, key, selector, transformer, comparator) => {\n  /** @type {?} */\n  const store = getBaseStore(decoratedInstance);\n  if (store) {\n    /** @type {?} */\n    const selections = getInstanceSelectionMap(decoratedInstance);\n    selections[key] = selections[key] || (!transformer ? store.select(selector, comparator) : store.select(selector).pipe(obs$ => transformer(obs$, decoratedInstance), distinctUntilChanged(comparator)));\n    return selections[key];\n  }\n  return undefined;\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Auto-dispatches the return value of the decorated function.\n *\n * Decorate a function creator method with \\@dispatch and its return\n * value will automatically be passed to ngRedux.dispatch() for you.\n * @return {?}\n */\nfunction dispatch() {\n  return function decorate(target, key, descriptor) {\n    /** @type {?} */\n    let originalMethod;\n    /** @type {?} */\n    const wrapped = function (...args) {\n      /** @type {?} */\n      const result = originalMethod.apply(this, args);\n      if (result !== undefined) {\n        /** @type {?} */\n        const store = getBaseStore(this) || NgRedux.instance;\n        if (store) {\n          store.dispatch(result);\n        }\n      }\n      return result;\n    };\n    descriptor = descriptor || Object.getOwnPropertyDescriptor(target, key);\n    if (descriptor === undefined) {\n      /** @type {?} */\n      const dispatchDescriptor = {\n        get: () => wrapped,\n        set: setMethod => originalMethod = setMethod\n      };\n      Object.defineProperty(target, key, dispatchDescriptor);\n      return dispatchDescriptor;\n    } else {\n      originalMethod = descriptor.value;\n      descriptor.value = wrapped;\n      return descriptor;\n    }\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Selects an observable from the store, and attaches it to the decorated\n * property.\n *\n * ```ts\n *  import { select } from '\\@angular-redux/store';\n *\n *  class SomeClass {\n * \\@select(['foo','bar']) foo$: Observable<string>\n * }\n * ```\n *\n * @template T\n * @param {?=} selector\n * A selector function, property name string, or property name path\n * (array of strings/array indices) that locates the store data to be\n * selected\n *\n * @param {?=} comparator Function used to determine if this selector has changed.\n * @return {?}\n */\nfunction select(selector, comparator) {\n  return (target, key) => {\n    /** @type {?} */\n    const adjustedSelector = selector ? selector : String(key).lastIndexOf('$') === String(key).length - 1 ? String(key).substring(0, String(key).length - 1) : key;\n    decorate(adjustedSelector, undefined, comparator)(target, key);\n  };\n}\n/**\n * Selects an observable using the given path selector, and runs it through the\n * given transformer function. A transformer function takes the store\n * observable as an input and returns a derived observable from it. That derived\n *  observable is run through distinctUntilChanges with the given optional\n * comparator and attached to the store property.\n *\n * Think of a Transformer as a FunctionSelector that operates on observables\n * instead of values.\n *\n * ```ts\n * import { select$ } from 'angular-redux/store';\n *\n * export const debounceAndTriple = obs$ => obs$\n *  .debounce(300)\n *  .map(x => 3 * x);\n *\n * class Foo {\n * \\@select$(['foo', 'bar'], debounceAndTriple)\n *  readonly debouncedFooBar$: Observable<number>;\n * }\n * ```\n * @template T\n * @param {?} selector\n * @param {?} transformer\n * @param {?=} comparator\n * @return {?}\n */\nfunction select$(selector, transformer, comparator) {\n  return decorate(selector, transformer, comparator);\n}\n/**\n * @param {?} selector\n * @param {?=} transformer\n * @param {?=} comparator\n * @return {?}\n */\nfunction decorate(selector, transformer, comparator) {\n  return function decorator(target, key) {\n    /**\n     * @this {?}\n     * @return {?}\n     */\n    function getter() {\n      return getInstanceSelection(this, key, selector, transformer, comparator);\n    }\n    // Replace decorated property with a getter that returns the observable.\n    if (delete target[key]) {\n      Object.defineProperty(target, key, {\n        get: getter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Modifies the behaviour of any `\\@select`, `\\@select$`, or `\\@dispatch`\n * decorators to operate on a substore defined by the IFractalStoreOptions.\n *\n * See:\n * https://github.com/angular-redux/platform/blob/master/packages/store/articles/fractal-store.md\n * for more information about SubStores.\n * @param {?} __0\n * @return {?}\n */\nfunction WithSubStore({\n  basePathMethodName,\n  localReducer\n}) {\n  return function decorate(constructor) {\n    setClassOptions(constructor, {\n      basePathMethodName,\n      localReducer\n    });\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @type {?}\n */\nconst assert = (condition, message) => {\n  if (!condition) {\n    throw new Error(message);\n  }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @type {?}\n */\nconst sniffSelectorType = selector => !selector ? 'nil' : Array.isArray(selector) ? 'path' : 'function' === typeof selector ? 'function' : 'property';\n/**\n * @hidden\n * @type {?}\n */\nconst resolver = selector => ({\n  property: state => state ? state[/** @type {?} */selector] : undefined,\n  path: state => getIn(state, /** @type {?} */selector),\n  function: /** @type {?} */selector,\n  nil: state => state\n});\n/**\n * @hidden\n * @type {?}\n */\nconst resolveToFunctionSelector = selector => resolver(selector)[sniffSelectorType(selector)];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @template State\n */\nclass SubStore {\n  /**\n   * @param {?} rootStore\n   * @param {?} basePath\n   * @param {?} localReducer\n   */\n  constructor(rootStore, basePath, localReducer) {\n    this.rootStore = rootStore;\n    this.basePath = basePath;\n    this.dispatch = action => this.rootStore.dispatch(Object.assign({}, /** @type {?} */action, {\n      '@angular-redux::fractalkey': JSON.stringify(this.basePath)\n    }));\n    this.getState = () => getIn(this.rootStore.getState(), this.basePath);\n    this.configureSubStore = (basePath, localReducer) => new SubStore(this.rootStore, [...this.basePath, ...basePath], localReducer);\n    this.select = (selector, comparator) => this.rootStore.select(this.basePath).pipe(map(resolveToFunctionSelector(selector)), distinctUntilChanged(comparator));\n    this.subscribe = listener => {\n      /** @type {?} */\n      const subscription = this.select().subscribe(listener);\n      return () => subscription.unsubscribe();\n    };\n    this.replaceReducer = nextLocalReducer => replaceLocalReducer(this.basePath, nextLocalReducer);\n    registerFractalReducer(basePath, localReducer);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @template RootState\n */\nclass RootStore extends NgRedux {\n  /**\n   * @param {?} ngZone\n   */\n  constructor(ngZone) {\n    super();\n    this.ngZone = ngZone;\n    this.store = undefined;\n    this.configureStore = (rootReducer, initState, middleware = [], enhancers = []) => {\n      assert(!this.store, 'Store already configured!');\n      // Variable-arity compose in typescript FTW.\n      this.setStore(compose(applyMiddleware(...middleware), ...enhancers)(createStore)(enableFractalReducers(rootReducer), initState));\n    };\n    this.provideStore = store => {\n      assert(!this.store, 'Store already configured!');\n      this.setStore(store);\n    };\n    this.getState = () => /** @type {?} */this.store.getState();\n    this.subscribe = listener => /** @type {?} */this.store.subscribe(listener);\n    this.replaceReducer = nextReducer => {\n      /** @type {?} */this.store.replaceReducer(nextReducer);\n    };\n    this.dispatch = action => {\n      assert(!!this.store, 'Dispatch failed: did you forget to configure your store? ' + 'https://github.com/angular-redux/platform/blob/master/packages/store/' + 'README.md#quick-start');\n      if (!NgZone.isInAngularZone()) {\n        return this.ngZone.run(() => /** @type {?} */this.store.dispatch(action));\n      } else {\n        return (/** @type {?} */this.store.dispatch(action)\n        );\n      }\n    };\n    this.select = (selector, comparator) => this.store$.pipe(distinctUntilChanged(), map(resolveToFunctionSelector(selector)), distinctUntilChanged(comparator));\n    this.configureSubStore = (basePath, localReducer) => new SubStore(this, basePath, localReducer);\n    this.storeToObservable = store => new Observable(observer => {\n      observer.next(store.getState());\n      /** @type {?} */\n      const unsubscribeFromRedux = store.subscribe(() => observer.next(store.getState()));\n      return () => {\n        unsubscribeFromRedux();\n        observer.complete();\n      };\n    });\n    NgRedux.instance = this;\n    this.store$ = /** @type {?} */new BehaviorSubject(undefined).pipe(filter(n => n !== undefined), switchMap(observableStore => /** @type {?} */observableStore));\n  }\n  /**\n   * @private\n   * @param {?} store\n   * @return {?}\n   */\n  setStore(store) {\n    this.store = store;\n    /** @type {?} */\n    const storeServable = this.storeToObservable(store);\n    this.store$.next( /** @type {?} */storeServable);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @param {?} ngZone\n * @return {?}\n */\nfunction _ngReduxFactory(ngZone) {\n  return new RootStore(ngZone);\n}\nclass NgReduxModule {}\nNgReduxModule.decorators = [{\n  type: NgModule,\n  args: [{\n    providers: [DevToolsExtension, {\n      provide: NgRedux,\n      useFactory: _ngReduxFactory,\n      deps: [NgZone]\n    }]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgRedux, NgReduxModule, DevToolsExtension, enableFractalReducers, select, select$, dispatch, WithSubStore, RootStore as ɵb, _ngReduxFactory as ɵa };","map":{"version":3,"names":["applyMiddleware","compose","createStore","ApplicationRef","Injectable","NgZone","NgModule","BehaviorSubject","Observable","distinctUntilChanged","map","filter","switchMap","NgRedux","instance","undefined","environment","window","DevToolsExtension","constructor","appRef","ngRedux","enhancer","options","subscription","isEnabled","getDevTools","listen","type","subscribe","isInAngularZone","tick","__REDUX_DEVTOOLS_EXTENSION__","devToolsExtension","decorators","ctorParameters","getIn","v","pathElems","firstElem","restElems","length","setIn","obj","value","Object","assign","reducerMap","composeReducers","reducers","state","action","reduce","subState","reducer","enableFractalReducers","rootReducer","rootFractalReducer","registerFractalReducer","basePath","localReducer","existingFractalReducer","JSON","stringify","Error","replaceLocalReducer","nextLocalReducer","fractalKey","fractalPath","parse","OPTIONS_KEY","INSTANCE_SUBSTORE_KEY","INSTANCE_SELECTIONS_KEY","INSTANCE_BASE_PATH_KEY","getClassOptions","decoratedInstance","setClassOptions","decoratedClassConstructor","setInstanceStore","store","getInstanceStore","getInstanceSelectionMap","map$$1","hasBasePathChanged","toString","setInstanceBasePath","clearInstanceState","getBaseStore","basePathMethodName","configureSubStore","getInstanceSelection","key","selector","transformer","comparator","selections","select","pipe","obs$","dispatch","decorate","target","descriptor","originalMethod","wrapped","args","result","apply","getOwnPropertyDescriptor","dispatchDescriptor","get","set","setMethod","defineProperty","adjustedSelector","String","lastIndexOf","substring","select$","decorator","getter","enumerable","configurable","WithSubStore","assert","condition","message","sniffSelectorType","Array","isArray","resolver","property","path","function","nil","resolveToFunctionSelector","SubStore","rootStore","getState","listener","unsubscribe","replaceReducer","RootStore","ngZone","configureStore","initState","middleware","enhancers","setStore","provideStore","nextReducer","run","store$","storeToObservable","observer","next","unsubscribeFromRedux","complete","n","observableStore","storeServable","_ngReduxFactory","NgReduxModule","providers","provide","useFactory","deps","ɵb","ɵa"],"sources":["/Users/aj/source/repos/tekinest/node_modules/@angular-redux/store/fesm2015/angular-redux-store.js"],"sourcesContent":["import { applyMiddleware, compose, createStore } from 'redux';\nimport { ApplicationRef, Injectable, NgZone, NgModule } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, filter, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This is the public interface of \\@angular-redux/store. It wraps the global\n * redux store and adds a few other add on methods. It's what you'll inject\n * into your Angular application as a service.\n * @abstract\n * @template RootState\n */\nclass NgRedux {\n}\n/**\n * \\@hidden, \\@deprecated\n */\nNgRedux.instance = undefined;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst environment = (/** @type {?} */ ((typeof window !== 'undefined'\n    ? window\n    : {})));\n/**\n * An angular-2-ified version of the Redux DevTools chrome extension.\n */\nclass DevToolsExtension {\n    /**\n     * @hidden\n     * @param {?} appRef\n     * @param {?} ngRedux\n     */\n    constructor(appRef, ngRedux) {\n        this.appRef = appRef;\n        this.ngRedux = ngRedux;\n        /**\n         * A wrapper for the Chrome Extension Redux DevTools.\n         * Makes sure state changes triggered by the extension\n         * trigger Angular2's change detector.\n         *\n         * @argument options: dev tool options; same\n         * format as described here:\n         * [zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md]\n         */\n        this.enhancer = (options) => {\n            /** @type {?} */\n            let subscription;\n            if (!this.isEnabled()) {\n                return null;\n            }\n            // Make sure changes from dev tools update angular's view.\n            (/** @type {?} */ (this.getDevTools())).listen(({ type }) => {\n                if (type === 'START') {\n                    subscription = this.ngRedux.subscribe(() => {\n                        if (!NgZone.isInAngularZone()) {\n                            this.appRef.tick();\n                        }\n                    });\n                }\n                else if (type === 'STOP') {\n                    subscription();\n                }\n            });\n            return (/** @type {?} */ (this.getDevTools()))(options || {});\n        };\n        /**\n         * Returns true if the extension is installed and enabled.\n         */\n        this.isEnabled = () => !!this.getDevTools();\n        /**\n         * Returns the redux devtools enhancer.\n         */\n        this.getDevTools = () => environment &&\n            (environment.__REDUX_DEVTOOLS_EXTENSION__ || environment.devToolsExtension);\n    }\n}\nDevToolsExtension.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDevToolsExtension.ctorParameters = () => [\n    { type: ApplicationRef },\n    { type: NgRedux }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices.\n *\n * @hidden\n * @param {?} v\n * @param {?} pathElems\n * @return {?}\n */\nfunction getIn(v, pathElems) {\n    if (!v) {\n        return v;\n    }\n    // If this is an ImmutableJS structure, use existing getIn function\n    if ('function' === typeof v.getIn) {\n        return v.getIn(pathElems);\n    }\n    const [firstElem, ...restElems] = pathElems;\n    if (undefined === v[firstElem]) {\n        return undefined;\n    }\n    if (restElems.length === 0) {\n        return v[firstElem];\n    }\n    return getIn(v[firstElem], restElems);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices. Path elements are created if\n * not there already. Does not mutate the given object.\n *\n * @hidden\n * @type {?}\n */\nconst setIn = (obj, [firstElem, ...restElems], value) => 'function' === typeof (obj[firstElem] || {}).setIn\n    ? Object.assign({}, obj, { [firstElem]: obj[firstElem].setIn(restElems, value) }) : Object.assign({}, obj, { [firstElem]: restElems.length === 0\n        ? value\n        : setIn(obj[firstElem] || {}, restElems, value) });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet reducerMap = {};\n/** @type {?} */\nconst composeReducers = (...reducers) => (state, action) => reducers.reduce((subState, reducer) => reducer(subState, action), state);\n/**\n * @param {?} rootReducer Call this on your root reducer to enable SubStore\n * functionality for pre-configured stores (e.g. using NgRedux.provideStore()).\n * NgRedux.configureStore\n * does it for you under the hood.\n * @return {?}\n */\nfunction enableFractalReducers(rootReducer) {\n    reducerMap = {};\n    return composeReducers(rootFractalReducer, rootReducer);\n}\n/**\n * @hidden\n * @param {?} basePath\n * @param {?} localReducer\n * @return {?}\n */\nfunction registerFractalReducer(basePath, localReducer) {\n    /** @type {?} */\n    const existingFractalReducer = reducerMap[JSON.stringify(basePath)];\n    if (existingFractalReducer && existingFractalReducer !== localReducer) {\n        throw new Error(`attempt to overwrite fractal reducer for basePath ${basePath}`);\n    }\n    reducerMap[JSON.stringify(basePath)] = localReducer;\n}\n/**\n * @hidden\n * @param {?} basePath\n * @param {?} nextLocalReducer\n * @return {?}\n */\nfunction replaceLocalReducer(basePath, nextLocalReducer) {\n    reducerMap[JSON.stringify(basePath)] = nextLocalReducer;\n}\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nfunction rootFractalReducer(state = {}, action) {\n    /** @type {?} */\n    const fractalKey = action['@angular-redux::fractalkey'];\n    /** @type {?} */\n    const fractalPath = fractalKey ? JSON.parse(fractalKey) : [];\n    /** @type {?} */\n    const localReducer = reducerMap[fractalKey || ''];\n    return fractalKey && localReducer\n        ? setIn(state, fractalPath, localReducer(getIn(state, fractalPath), action))\n        : state;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * OPTIONS_KEY: this is per-class (static) and holds the config from the\n * \\@SubStore decorator.\n * @type {?}\n */\nconst OPTIONS_KEY = '@angular-redux::substore::class::options';\n/**\n * INSTANCE_SUBSTORE_KEY, INSTANCE_SELECTIONS_KEY: these are per-instance\n * (non-static) and holds references to the substores/selected observables\n * to be used by an instance of a decorated class. I'm not using\n * reflect-metadata here because I want\n *\n * 1. different instances to have different substores in the case where\n * `basePathMethodName` is dynamic.\n * 2. the instance substore to be garbage collected when the instance is no\n * longer reachable.\n * This is therefore an own-property on the actual instance of the decorated\n * class.\n * @type {?}\n */\nconst INSTANCE_SUBSTORE_KEY = '@angular-redux::substore::instance::store';\n/** @type {?} */\nconst INSTANCE_SELECTIONS_KEY = '@angular-redux::substore::instance::selections';\n/**\n * Used to detect when the base path changes - this allows components to\n * dynamically adjust their selections if necessary.\n * @type {?}\n */\nconst INSTANCE_BASE_PATH_KEY = '@angular-redux::substore::instance::basepath';\n/** @type {?} */\nconst getClassOptions = (decoratedInstance) => decoratedInstance.constructor[OPTIONS_KEY];\n/**\n * @hidden\n * @type {?}\n */\nconst setClassOptions = (decoratedClassConstructor, options) => {\n    decoratedClassConstructor[OPTIONS_KEY] = options;\n};\n// I want the store to be saved on the actual instance so\n// 1. different instances can have distinct substores if necessary\n// 2. the substore/selections will be marked for garbage collection when the\n//    instance is destroyed.\n/** @type {?} */\nconst setInstanceStore = (decoratedInstance, store) => (decoratedInstance[INSTANCE_SUBSTORE_KEY] = store);\n/** @type {?} */\nconst getInstanceStore = (decoratedInstance) => decoratedInstance[INSTANCE_SUBSTORE_KEY];\n/** @type {?} */\nconst getInstanceSelectionMap = (decoratedInstance) => {\n    /** @type {?} */\n    const map$$1 = decoratedInstance[INSTANCE_SELECTIONS_KEY] || {};\n    decoratedInstance[INSTANCE_SELECTIONS_KEY] = map$$1;\n    return map$$1;\n};\n/** @type {?} */\nconst hasBasePathChanged = (decoratedInstance, basePath) => decoratedInstance[INSTANCE_BASE_PATH_KEY] !== (basePath || []).toString();\n/** @type {?} */\nconst setInstanceBasePath = (decoratedInstance, basePath) => {\n    decoratedInstance[INSTANCE_BASE_PATH_KEY] = (basePath || []).toString();\n};\n/** @type {?} */\nconst clearInstanceState = (decoratedInstance) => {\n    decoratedInstance[INSTANCE_SELECTIONS_KEY] = null;\n    decoratedInstance[INSTANCE_SUBSTORE_KEY] = null;\n    decoratedInstance[INSTANCE_BASE_PATH_KEY] = null;\n};\n/**\n * Gets the store associated with a decorated instance (e.g. a\n * component or service)\n * @hidden\n * @type {?}\n */\nconst getBaseStore = (decoratedInstance) => {\n    // The root store hasn't been set up yet.\n    if (!NgRedux.instance) {\n        return undefined;\n    }\n    /** @type {?} */\n    const options = getClassOptions(decoratedInstance);\n    // This is not decorated with `@WithSubStore`. Return the root store.\n    if (!options) {\n        return NgRedux.instance;\n    }\n    // Dynamic base path support:\n    /** @type {?} */\n    const basePath = decoratedInstance[options.basePathMethodName]();\n    if (hasBasePathChanged(decoratedInstance, basePath)) {\n        clearInstanceState(decoratedInstance);\n        setInstanceBasePath(decoratedInstance, basePath);\n    }\n    if (!basePath) {\n        return NgRedux.instance;\n    }\n    /** @type {?} */\n    const store = getInstanceStore(decoratedInstance);\n    if (!store) {\n        setInstanceStore(decoratedInstance, NgRedux.instance.configureSubStore(basePath, options.localReducer));\n    }\n    return getInstanceStore(decoratedInstance);\n};\n/**\n * Creates an Observable from the given selection parameters,\n * rooted at decoratedInstance's store, and caches it on the\n * instance for future use.\n * @hidden\n * @type {?}\n */\nconst getInstanceSelection = (decoratedInstance, key, selector, transformer, comparator) => {\n    /** @type {?} */\n    const store = getBaseStore(decoratedInstance);\n    if (store) {\n        /** @type {?} */\n        const selections = getInstanceSelectionMap(decoratedInstance);\n        selections[key] =\n            selections[key] ||\n                (!transformer\n                    ? store.select(selector, comparator)\n                    : store.select(selector).pipe(obs$ => transformer(obs$, decoratedInstance), distinctUntilChanged(comparator)));\n        return selections[key];\n    }\n    return undefined;\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Auto-dispatches the return value of the decorated function.\n *\n * Decorate a function creator method with \\@dispatch and its return\n * value will automatically be passed to ngRedux.dispatch() for you.\n * @return {?}\n */\nfunction dispatch() {\n    return function decorate(target, key, descriptor) {\n        /** @type {?} */\n        let originalMethod;\n        /** @type {?} */\n        const wrapped = function (...args) {\n            /** @type {?} */\n            const result = originalMethod.apply(this, args);\n            if (result !== undefined) {\n                /** @type {?} */\n                const store = getBaseStore(this) || NgRedux.instance;\n                if (store) {\n                    store.dispatch(result);\n                }\n            }\n            return result;\n        };\n        descriptor = descriptor || Object.getOwnPropertyDescriptor(target, key);\n        if (descriptor === undefined) {\n            /** @type {?} */\n            const dispatchDescriptor = {\n                get: () => wrapped,\n                set: setMethod => (originalMethod = setMethod),\n            };\n            Object.defineProperty(target, key, dispatchDescriptor);\n            return dispatchDescriptor;\n        }\n        else {\n            originalMethod = descriptor.value;\n            descriptor.value = wrapped;\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Selects an observable from the store, and attaches it to the decorated\n * property.\n *\n * ```ts\n *  import { select } from '\\@angular-redux/store';\n *\n *  class SomeClass {\n * \\@select(['foo','bar']) foo$: Observable<string>\n * }\n * ```\n *\n * @template T\n * @param {?=} selector\n * A selector function, property name string, or property name path\n * (array of strings/array indices) that locates the store data to be\n * selected\n *\n * @param {?=} comparator Function used to determine if this selector has changed.\n * @return {?}\n */\nfunction select(selector, comparator) {\n    return (target, key) => {\n        /** @type {?} */\n        const adjustedSelector = selector\n            ? selector\n            : String(key).lastIndexOf('$') === String(key).length - 1\n                ? String(key).substring(0, String(key).length - 1)\n                : key;\n        decorate(adjustedSelector, undefined, comparator)(target, key);\n    };\n}\n/**\n * Selects an observable using the given path selector, and runs it through the\n * given transformer function. A transformer function takes the store\n * observable as an input and returns a derived observable from it. That derived\n *  observable is run through distinctUntilChanges with the given optional\n * comparator and attached to the store property.\n *\n * Think of a Transformer as a FunctionSelector that operates on observables\n * instead of values.\n *\n * ```ts\n * import { select$ } from 'angular-redux/store';\n *\n * export const debounceAndTriple = obs$ => obs$\n *  .debounce(300)\n *  .map(x => 3 * x);\n *\n * class Foo {\n * \\@select$(['foo', 'bar'], debounceAndTriple)\n *  readonly debouncedFooBar$: Observable<number>;\n * }\n * ```\n * @template T\n * @param {?} selector\n * @param {?} transformer\n * @param {?=} comparator\n * @return {?}\n */\nfunction select$(selector, transformer, comparator) {\n    return decorate(selector, transformer, comparator);\n}\n/**\n * @param {?} selector\n * @param {?=} transformer\n * @param {?=} comparator\n * @return {?}\n */\nfunction decorate(selector, transformer, comparator) {\n    return function decorator(target, key) {\n        /**\n         * @this {?}\n         * @return {?}\n         */\n        function getter() {\n            return getInstanceSelection(this, key, selector, transformer, comparator);\n        }\n        // Replace decorated property with a getter that returns the observable.\n        if (delete target[key]) {\n            Object.defineProperty(target, key, {\n                get: getter,\n                enumerable: true,\n                configurable: true,\n            });\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Modifies the behaviour of any `\\@select`, `\\@select$`, or `\\@dispatch`\n * decorators to operate on a substore defined by the IFractalStoreOptions.\n *\n * See:\n * https://github.com/angular-redux/platform/blob/master/packages/store/articles/fractal-store.md\n * for more information about SubStores.\n * @param {?} __0\n * @return {?}\n */\nfunction WithSubStore({ basePathMethodName, localReducer, }) {\n    return function decorate(constructor) {\n        setClassOptions(constructor, {\n            basePathMethodName,\n            localReducer,\n        });\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @type {?}\n */\nconst assert = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @type {?}\n */\nconst sniffSelectorType = (selector) => !selector\n    ? 'nil'\n    : Array.isArray(selector)\n        ? 'path'\n        : 'function' === typeof selector\n            ? 'function'\n            : 'property';\n/**\n * @hidden\n * @type {?}\n */\nconst resolver = (selector) => ({\n    property: (state) => state ? state[(/** @type {?} */ (selector))] : undefined,\n    path: (state) => getIn(state, (/** @type {?} */ (selector))),\n    function: (/** @type {?} */ (selector)),\n    nil: (state) => state,\n});\n/**\n * @hidden\n * @type {?}\n */\nconst resolveToFunctionSelector = (selector) => resolver(selector)[sniffSelectorType(selector)];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @template State\n */\nclass SubStore {\n    /**\n     * @param {?} rootStore\n     * @param {?} basePath\n     * @param {?} localReducer\n     */\n    constructor(rootStore, basePath, localReducer) {\n        this.rootStore = rootStore;\n        this.basePath = basePath;\n        this.dispatch = action => this.rootStore.dispatch(Object.assign({}, ((/** @type {?} */ (action))), { '@angular-redux::fractalkey': JSON.stringify(this.basePath) }));\n        this.getState = () => getIn(this.rootStore.getState(), this.basePath);\n        this.configureSubStore = (basePath, localReducer) => new SubStore(this.rootStore, [...this.basePath, ...basePath], localReducer);\n        this.select = (selector, comparator) => this.rootStore.select(this.basePath).pipe(map(resolveToFunctionSelector(selector)), distinctUntilChanged(comparator));\n        this.subscribe = (listener) => {\n            /** @type {?} */\n            const subscription = this.select().subscribe(listener);\n            return () => subscription.unsubscribe();\n        };\n        this.replaceReducer = (nextLocalReducer) => replaceLocalReducer(this.basePath, nextLocalReducer);\n        registerFractalReducer(basePath, localReducer);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @template RootState\n */\nclass RootStore extends NgRedux {\n    /**\n     * @param {?} ngZone\n     */\n    constructor(ngZone) {\n        super();\n        this.ngZone = ngZone;\n        this.store = undefined;\n        this.configureStore = (rootReducer, initState, middleware = [], enhancers = []) => {\n            assert(!this.store, 'Store already configured!');\n            // Variable-arity compose in typescript FTW.\n            this.setStore(compose(applyMiddleware(...middleware), ...enhancers)(createStore)(enableFractalReducers(rootReducer), initState));\n        };\n        this.provideStore = (store) => {\n            assert(!this.store, 'Store already configured!');\n            this.setStore(store);\n        };\n        this.getState = () => (/** @type {?} */ (this.store)).getState();\n        this.subscribe = (listener) => (/** @type {?} */ (this.store)).subscribe(listener);\n        this.replaceReducer = (nextReducer) => {\n            (/** @type {?} */ (this.store)).replaceReducer(nextReducer);\n        };\n        this.dispatch = (action) => {\n            assert(!!this.store, 'Dispatch failed: did you forget to configure your store? ' +\n                'https://github.com/angular-redux/platform/blob/master/packages/store/' +\n                'README.md#quick-start');\n            if (!NgZone.isInAngularZone()) {\n                return this.ngZone.run(() => (/** @type {?} */ (this.store)).dispatch(action));\n            }\n            else {\n                return (/** @type {?} */ (this.store)).dispatch(action);\n            }\n        };\n        this.select = (selector, comparator) => this.store$.pipe(distinctUntilChanged(), map(resolveToFunctionSelector(selector)), distinctUntilChanged(comparator));\n        this.configureSubStore = (basePath, localReducer) => new SubStore(this, basePath, localReducer);\n        this.storeToObservable = (store) => new Observable((observer) => {\n            observer.next(store.getState());\n            /** @type {?} */\n            const unsubscribeFromRedux = store.subscribe(() => observer.next(store.getState()));\n            return () => {\n                unsubscribeFromRedux();\n                observer.complete();\n            };\n        });\n        NgRedux.instance = this;\n        this.store$ = (/** @type {?} */ (new BehaviorSubject(undefined).pipe(filter(n => n !== undefined), switchMap(observableStore => (/** @type {?} */ (observableStore))))));\n    }\n    /**\n     * @private\n     * @param {?} store\n     * @return {?}\n     */\n    setStore(store) {\n        this.store = store;\n        /** @type {?} */\n        const storeServable = this.storeToObservable(store);\n        this.store$.next((/** @type {?} */ (storeServable)));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @hidden\n * @param {?} ngZone\n * @return {?}\n */\nfunction _ngReduxFactory(ngZone) {\n    return new RootStore(ngZone);\n}\nclass NgReduxModule {\n}\nNgReduxModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    DevToolsExtension,\n                    { provide: NgRedux, useFactory: _ngReduxFactory, deps: [NgZone] },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgRedux, NgReduxModule, DevToolsExtension, enableFractalReducers, select, select$, dispatch, WithSubStore, RootStore as ɵb, _ngReduxFactory as ɵa };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}