{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { select } from '@angular-redux/store';\nimport { AuthActions } from '../../store/auth/actions';\nexport let LoginComponent = class LoginComponent {\n  constructor(ngRedux, http, db, authentication, notifierService, route) {\n    this.ngRedux = ngRedux;\n    this.http = http;\n    this.db = db;\n    this.authentication = authentication;\n    this.route = route;\n    this.loading = false;\n    this.submit = () => {\n      if (!this.formEmail.errors && !this.formPassword.errors && !this.loading) {\n        this.loading = true;\n        this.action.login(this.form.value, res => {\n          this.loading = false;\n          if (res !== 'done') this.notifier.notify('error', res);else this.route.navigate(['newsec/dashboard']);\n        });\n      } else console.log(this.form.value);\n    };\n    this.notifier = notifierService;\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.min(6)])\n    });\n    this.subscription = ngRedux.select('auth').subscribe(item => this.user = item);\n    this.action = new AuthActions(ngRedux, http, db, authentication);\n  }\n  ngOnInit() {}\n  get formEmail() {\n    return this.form.get('email');\n  }\n  get formPassword() {\n    return this.form.get('password');\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n};\n__decorate([select()], LoginComponent.prototype, \"auth\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","select","AuthActions","LoginComponent","constructor","ngRedux","http","db","authentication","notifierService","route","loading","submit","formEmail","errors","formPassword","action","login","form","value","res","notifier","notify","navigate","console","log","email","required","password","min","subscription","subscribe","item","user","ngOnInit","get","ngOnDestroy","unsubscribe","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/aj/source/repos/tekinest/src/app/newsec/container/login/login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { NgRedux, select } from '@angular-redux/store'\nimport { AuthActions } from '../../store/auth/actions'\nimport { IAppState } from '../../../store/index'\nimport { HttpClient } from '@angular/common/http'\nimport { AngularFireDatabase } from 'angularfire2/database'\nimport { AngularFireAuth } from 'angularfire2/auth'\nimport { NotifierService } from 'angular-notifier'\nimport { Router } from '@angular/router'\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\n\nexport class LoginComponent implements OnInit {\n\n  private readonly notifier: NotifierService;\n\n  @select() auth\n  email: string\n  password: string\n  form: FormGroup\n  loading: boolean = false\n  user; action; subscription\n\n  constructor(private ngRedux: NgRedux<IAppState>, \n    private http: HttpClient, \n    private db: AngularFireDatabase, private authentication: AngularFireAuth, \n    notifierService: NotifierService, private route: Router) {\n    this.notifier = notifierService;\n    this.form = new FormGroup({ \n      email: new FormControl('', [\n        Validators.required,\n        Validators.email,\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.min(6),\n      ]),\n    })\n    this.subscription = ngRedux.select('auth').subscribe(item => this.user = item)\n    this.action = new AuthActions(ngRedux, http, db, authentication)\n  }\n\n  ngOnInit() {\n  }\n\n  get formEmail() { return this.form.get('email'); }\n\n  get formPassword() { return this.form.get('password'); }\n\n  submit = () => {\n    if (!this.formEmail.errors && !this.formPassword.errors && !this.loading) {\n      this.loading = true\n      this.action.login(this.form.value, res => {\n        this.loading = false\n        if (res !== 'done') this.notifier.notify('error', res);\n        else this.route.navigate(['newsec/dashboard'])\n      }) \n    } else console.log(this.form.value)\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AACnE,SAAkBC,MAAM,QAAQ,sBAAsB;AACtD,SAASC,WAAW,QAAQ,0BAA0B;AAgB/C,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAWzBC,YAAoBC,OAA2B,EACrCC,IAAgB,EAChBC,EAAuB,EAAUC,cAA+B,EACxEC,eAAgC,EAAUC,KAAa;IAHrC,KAAAL,OAAO,GAAPA,OAAO;IACjB,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,EAAE,GAAFA,EAAE;IAA+B,KAAAC,cAAc,GAAdA,cAAc;IACb,KAAAE,KAAK,GAALA,KAAK;IANjD,KAAAC,OAAO,GAAY,KAAK;IA6BxB,KAAAC,MAAM,GAAG,MAAK;MACZ,IAAI,CAAC,IAAI,CAACC,SAAS,CAACC,MAAM,IAAI,CAAC,IAAI,CAACC,YAAY,CAACD,MAAM,IAAI,CAAC,IAAI,CAACH,OAAO,EAAE;QACxE,IAAI,CAACA,OAAO,GAAG,IAAI;QACnB,IAAI,CAACK,MAAM,CAACC,KAAK,CAAC,IAAI,CAACC,IAAI,CAACC,KAAK,EAAEC,GAAG,IAAG;UACvC,IAAI,CAACT,OAAO,GAAG,KAAK;UACpB,IAAIS,GAAG,KAAK,MAAM,EAAE,IAAI,CAACC,QAAQ,CAACC,MAAM,CAAC,OAAO,EAAEF,GAAG,CAAC,CAAC,KAClD,IAAI,CAACV,KAAK,CAACa,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;QAChD,CAAC,CAAC;OACH,MAAMC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,IAAI,CAACC,KAAK,CAAC;IACrC,CAAC;IA/BC,IAAI,CAACE,QAAQ,GAAGZ,eAAe;IAC/B,IAAI,CAACS,IAAI,GAAG,IAAIpB,SAAS,CAAC;MACxB4B,KAAK,EAAE,IAAI3B,WAAW,CAAC,EAAE,EAAE,CACzBC,UAAU,CAAC2B,QAAQ,EACnB3B,UAAU,CAAC0B,KAAK,CACjB,CAAC;MACFE,QAAQ,EAAE,IAAI7B,WAAW,CAAC,EAAE,EAAE,CAC5BC,UAAU,CAAC2B,QAAQ,EACnB3B,UAAU,CAAC6B,GAAG,CAAC,CAAC,CAAC,CAClB;KACF,CAAC;IACF,IAAI,CAACC,YAAY,GAAGzB,OAAO,CAACJ,MAAM,CAAC,MAAM,CAAC,CAAC8B,SAAS,CAACC,IAAI,IAAI,IAAI,CAACC,IAAI,GAAGD,IAAI,CAAC;IAC9E,IAAI,CAAChB,MAAM,GAAG,IAAId,WAAW,CAACG,OAAO,EAAEC,IAAI,EAAEC,EAAE,EAAEC,cAAc,CAAC;EAClE;EAEA0B,QAAQA,CAAA,GACR;EAEA,IAAIrB,SAASA,CAAA;IAAK,OAAO,IAAI,CAACK,IAAI,CAACiB,GAAG,CAAC,OAAO,CAAC;EAAE;EAEjD,IAAIpB,YAAYA,CAAA;IAAK,OAAO,IAAI,CAACG,IAAI,CAACiB,GAAG,CAAC,UAAU,CAAC;EAAE;EAavDC,WAAWA,CAAA;IACT,IAAI,CAACN,YAAY,CAACO,WAAW,EAAE;EACjC;CAED;AAhDWC,UAAA,EAATrC,MAAM,EAAE,C,2CAAK;AAJHE,cAAc,GAAAmC,UAAA,EAP1BzC,SAAS,CAAC;EACT0C,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EAGWtC,cAAc,CAoD1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}